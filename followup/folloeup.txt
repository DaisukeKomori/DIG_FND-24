takuya matsumoto

follow-up 評価
JSDocを追加記入するなど、より問題の理解を深めようとする姿勢あり。6問目はアニメーションを調べて取り入れるなど学習したことがうかがわれる。'use strict'なし。コードスタイルばらつきあり。リファクタリングの余地大。

・テスト全問パス
・'use strict' なし
・スペースの有無にバラツキあり

followup assessmentお疲れさまでした！

テストは全問パスしています！🎉
素晴らしいですね！😊
すべての問題で、どのような値を返すべきか？ しっかりと理解されています。

TDDテスト関数を追加されており、テスト駆動開発の大切さもご理解いただいています。
また、JSDocも書いていただいたんですね！👏
非常に良いです。

コードスタイルについてもとても見やすくて良いですが、スペースの有無にバラツキがあるように見えます。
ここはご注意ください。

また、'use strict'がないのはコピー忘れでしょうか？
基礎コースでは取り上げませんでしたが、これは非常に大切なものですので、意味を調べていただくことをお勧めします。

6問目の Change colorは、ボタンやバックカラーがアニメーションするんですね！！！
マウスポインタの変更など、気の利いたことも織り込まれていてすごいです！

テストはパスしており、実装の方法はさまざまなやり方があると思うのですが、
以下、ご参考までに見ておいてください。

1問目：
boolean値を === true のような形で条件分岐されています。
boolean値ってどのような値でしたっけ？
この値と .filterを使って、1行で return することもできそうです。

2問目、3問目：
Objectクラスにはさまざまなビルトインメソッドがあります。
それらを使えば、.filterや .mapを使って簡潔化できそうです。

4問目：
アロー関数を使用したパターンも試してみてください。

5問目：
意味は理解されていますが、「sayHello関数は戻り値を返さない」のではなく、
何かを返しています。

6問目：
アニメーションの処理をchangeColor関数内で行なっていますが、機能別に分離すると見やすくなりそうです。

9問目：
多くの条件分岐をされていますが、配列やオブジェクトを用意しておくなど、
いろいろなやり方でリファクタリングできそうです。

10問目：
ArrayクラスのisArrayメソッドで判別されているのは素晴らしいです。
ですが、Objectクラスのメソッドを使用して、オブジェクトの値を配列変換することができます。
それを使用すれば条件分岐を省くことができますね。

11問目：
これもアロー関数を使用したパターンも試してみてください。

上記はコード行数を少なくすることなどが目的ではありません。
これらを踏まえた上で「いやいや、私は見やすくするためにこうしているんだ」
というのはアリだと思います。
美しく見やすい効率的なコードにしていただきたいです。

フォローアップ期間も自習をされてスキルアップされたことが伺えます。
今後も更に学習を続けられて、takuyaさんのお名前が聞こえてくることを期待しています！😊

masahiro horikawa

follow-up 評価
Objectクラスのメソッドを使ったりErrorを throwするなど、学習したことがうかがわれる。6問目未提出。test関数は使われているが、cocsole.logを残したまま。一部のインデント乱れ。「sayHello関数は空で何も返さない」との説明。リファクタリングの余地大。

・6問目以外テストパス（6問目は未実施）
・console.log 消されていない

followup assessmentお疲れさまでした！

テストは全問パスしています！🎉
おめでとうございます！😊
すべての問題で、どのような値を返すべきか？ しっかりと理解されています。

TDDテスト関数を追加されており、テスト駆動開発の大切さもご理解いただいています。
ただし、これがあるのでしたら console.logは必要がありませんね。

コードスタイルも整っていますが、9問目のみインデントが乱れています。
ここは注意をしてください。

2問目は Objectクラスのメソッドを使われたんですね！
素晴らしいです！👏

テストはパスしており、実装の方法はさまざまなやり方があると思うのですが、
以下、ご参考までに見ておいてください。

1問目：
この isEvenという値を .filterの条件に加えれば、もっとスッキリします。

3問目：
ここも Objectクラスのメソッドを使用すれば、2問目と同じぐらいのコード量で表現できます。

4問目：
アロー関数を使用したパターンも試してみてください。

5問目：
意味は理解されていますが、「sayHello関数は空で何も返さない」のではなく、
何かを返しています。

6問目：
時間がなくパスとのことですが、お時間がある時にでもチャレンジしてみてください。

7問目：
期待通りの引数が来なかった場合には、Errorを throwしているんですね！😮
よく調べられています。
ただ、これを入れるのであればこれに対するテストも欲しかったところです。
また、本当にエラーで止めてしまって良いのか？ということも議論の余地がありそうですね。

9問目：
多くの条件分岐をされていますが、配列やオブジェクトを用意しておくなど、
いろいろなやり方でリファクタリングできそうです。

10問目：
ArrayクラスのisArrayメソッドで判別されているのは素晴らしいです。
ですが、Objectクラスのメソッドを使用して、オブジェクトの値を配列変換することができます。
それを使用すれば条件分岐を省くことができますね。

11問目：
これもアロー関数を使用したパターンも試してみてください。

上記はコード行数を少なくすることなどが目的ではありません。
これらを踏まえた上で「いやいや、私は見やすくするためにこうしているんだ」
というのはアリだと思います。
美しく見やすい効率的なコードにしていただきたいです。

フォローアップ期間も自習をされてスキルアップされたことが伺えます。
今後も学習を続けられて、masahiroさんのスキルレベルが更に向上することを期待しています！😊


yudai fukushima

follow-up 評価
ObjectクラスやArrayクラスのメソッドを使うなど、学習したことがうかがわれる。'use strict' なし。test関数なしですべて console.log。6問目は出題の不要なコードが残ったまま。一部のインデント乱れ。リファクタリングの余地大。

・期待する値がコンソール出力されているが、テスト関数未実装
・'use strict' なし

followup assessmentお疲れさまでした！

全問期待する値が出力されています！🎉
おめでとうございます！😊
すべての問題で、どのような値を返すべきか？ しっかりと理解されています。

ただし、出力された値が本当に期待される値か否か？を確認することが大変ではありませんでしたか？
テストはどのように行なうと学びましたっけ？
Day05、Day08のスライドをもう一度見返してみてください。

'use strict'がないのはコピー忘れでしょうか？
基礎コースでは取り上げませんでしたが、これは非常に大切なものですので、意味を調べていただくことをお勧めします。

また、インデントがところどころ乱れているのも目に付きます。
ご注意ください。

2問目は Objectクラスのメソッドを使われたんですね！
スッキリとしていて非常に良いです！👏

実装の方法はさまざまなやり方があると思うのですが、
以下、アドバイスとしてのみ見ておいてください。

1問目：
この booleanという値を .filterの条件に加えれば、もっとスッキリします。

3問目：
これも Objectクラスのメソッドを使えば簡潔に returnすることができます。

4問目：
アロー関数を使用したパターンも試してみてください。

6問目：
期待通りに背景色の変更を行なうことはできていますが、出題の不要なコードが残ってしまっています。

9問目：
多くの条件分岐をされていますが、配列やオブジェクトを用意しておくなど、
いろいろなやり方でリファクタリングできそうです。

10問目：
ArrayクラスのisArrayメソッドで判別されているのは素晴らしいです。
ですが、Objectクラスのメソッドを使用して、オブジェクトの値を配列変換することができます。
それを使用すれば条件分岐を省くことができますね。

11問目：
これもアロー関数を使用したパターンも試してみてください。

上記はコード行数を少なくすることなどが目的ではありません。
これらを踏まえた上で「いやいや、私は見やすくするためにこうしているんだ」
というのはアリだと思います。
美しく見やすい効率的なコードにしていただきたいです。

Arrayクラスのメソッドを使用するなど、フォローアップ期間も自習をされてスキルアップされたことが伺えます。
今後も学習を続けられて、yudaiさんのスキルレベルが更に向上することを期待しています！😊


takuji tsuchida

follow-up 評価
ヘルパー関数使用、Objectクラスのメソッド使用、データに配列を使用するなど効率的なコードを追求している。test関数未実装。すべてセミコロンなしのスタイル。タイプミスあり。配列のループに for loop使用。

ObjectクラスやArrayクラスのメソッドを使うなど、学習したことがうかがわれる。'use strict' なし。test関数なしですべて console.log。6問目は出題の不要なコードが残ったまま。一部のインデント乱れ。リファクタリングの余地大。

・ムダのないコード
・test関数なし
・セミコロンなしのスタイル

followup assessmentお疲れさまでした！

テストは全問パスしています！🎉
…と言いたいところなのですが、test関数が実装されていません 😢
他のファイルに実装されていて、忘れてしまいましたでしょうか？
こちらで用意した test関数を使用したところ、すべてパスしました 😊

すべての問題が無駄のないコードで解かれており、またどのような値を返すべきか？
をしっかりと理解されています。👏
1問目のヘルパー関数などは、とても素晴らしいです。

実装の方法はさまざまなやり方があると思うのですが、
以下、ご参考までに見ておいてください。

1問目：
奇数偶数を判別する式と、boolean値を "そのまま" .filterの条件にすれば簡潔になり、
ヘルパー関数も不要になりそうです。

2問目、3問目：
これも Objectクラスのメソッドを使用すれば、更にスッキリと書くことができます。

3問目：
let k = keys.length - values.leng の意味がわかりませんでした 🤔
要素の数が異なる場合に、undefinedで埋めるための値でしょうか？
入力ミスも気になりましたが、それに対応するテストが欲しかったです。
…存在しないプロパティを参照すると undefinedが返されることは勉強になりました。

4問目：
アロー関数を使用したパターンも試してみてください。

6問目：
追加された年月日時刻が、ボタンにかぶってしまっているのは惜しいですね。
（問題に「CSSは変更する必要はない」と書かれてしまっていますが）
また、varで宣言されている変数は、必要がなければ constで宣言いただきたいです。

9問目：
配列を使われており、効率的なコードになっています。
どうせなら for ofでの条件分岐とカウンターのインクリメントもスリムにしたいですね。
データ型を表す文字列をキーとして持つオブジェクトを用意して、値は出現回数。
などとしたらどうなりますでしょうか？

11問目：
これもアロー関数を使用したパターンも試してみてください。

効率的なコードを追求され、よく考えられていますね。
今後もさらにいろいろなロジックに挑戦され、レベルアップされることを期待します！😊

























takuya suzuki

・テスト全問パス
・TDDテスト関数を追加している
・若干スペースのないところあり



followup assessmentお疲れさまでした！

テストは全問パスしています！
素晴らしいですね！
すべての問題で、どのような値を返すべきか？ しっかりと理解されていますね。

TDDテスト関数を追加を追加されており、テスト駆動開発の大切さもご理解いただいています。

コードスタイルについてもとても見やすくて良いですが、いくつかのところでスペースが抜けているように見受けられましたので、ご注意ください。

テストはパスしており、実装の方法はさまざまなやり方があると思うのですが、
以下、アドバイスとしてのみ見ておいてください。

1問目：
boolean値を === true で条件分岐されています。
boolean値ってどのような値でしたっけ？
.filterを使って、1行で return することもできそうです。

2問目、3問目：
Objectクラスにはさまざまなメソッドがあります。
それらを使えば、.filterや .mapを使って簡潔化できそうです。



ryuji takagi

masato tsuji

keisuke kurachi

ryosuke mochiki

takuya matsumoto

