// *** takashi sayo ***

assessment-2 お疲れさまでした！

1問目はパスしています！
問題の意味を正しく捉えて関数を宣言することができていますね！

ただし、
・変数名がキャメルケースになっていないのは修正いただきたいところです。
・文字列連結は、テンプレートリテラルも是非使用してみてください。

2問目はオブジェクトへのキーバリューペアの格納方法を忘れてしまいましたか？
const で宣言している変数に値を再代入しようとしてエラーになっています。
if文の条件式ではちゃんと値を取得することができていますのに、
（角カッコ前の余分なスペースは置いておいて）非常に惜しいです。
オブジェクトへキーバリューペアをどのように格納するか？復習をお願いします。

3問目以降の問題は時間切れになってしまいましたでしょうか？
前にやったスライドも確認しながらやってみてください。
2/15までに再提出をお願いします！

後半も楽しみながらやっていきましょう！🎉

// *** 再提出 ***
3行目i=0,1,2,3（{}内を4回ループ）、4行目j=0,1,2,3（{}内を4回ループ）、5行目k=1,2（{}内を2回ループ）する。6行目console.logは配列nameのインデックス=jを表示するので上から順に実行すると　name[0],name[0],name[1],name[1],name[2],name[2],name[3],name[3]　が3行目のfor1回分となるのでこれを4回繰り返す。

1行目i=0,1({}内を2回ループ)、1回実行するごとにa:iを表示する。3行目i=0,1({}内を2回ループ)、1回実行するごとにb:iを表示する。5行目i=0,1({}内を2回ループ)、1回実行するごとにc:iを表示する。上から順に実行するとa:0 b:0 c:0 c:1 b:1 c:0 c:1 が1行目のforループ1回分なのでこれを2回繰り返す。

ありがとうございました。今回のアセスメントで自分は空の配列、空のオブジェクトへの代入が理解できていないことがよくわかりました！正直アセスメントを受ける前までは理解していたつもりだったのでここで気づけて良かったです。アセスメント提出フォームからもう一度同じURLで提出しましたのでご確認お願いします！

takashiさん
assessment-2の早々の再提出ありがとうございました。
Gistへの再コメントは指示されていないため、こちらで失礼します。

テストは全問パスしていますね！
コードスタイルも申し分なく、素晴らしいです！

説明に関してもよく理解されていることがわかりますが、
問5は問題に「複数のネストされたブロック内で同じ変数名 i を使用している」と書かれています。
「参照することができる範囲」を表わす言葉を用いて説明されるともっと良かったですね。

配列、オブジェクト、値としての関数…等々、色々出てきて「あれ？どうやるんだったけ？」ってなりますよね。
その中でご自分で理解不足だったと明確に意識されているのも非常に良いと思いました。
今後も理解を深めていってください！

また、いつも多くのリアクションをしていただきありがとうございます！
非常に元気付けられてます！

これからも楽しんでいきましょう！


// *** keisuke kurachi ***

assessment-2 お疲れさまでした！

1問目はテストをパスしています！
問題の意味を正しく捉えて関数を宣言することができていますね！
テンプレートリテラルも使っていただいたんですね！
非常に良いです！

2問目は、JSDocの@returnsを見て配列を返すものだと勘違いされましたか？
問題文は「新しいオブジェクト」とあります。
オブジェクトへキーバリューペアを格納する方法も思い出していただき、
再挑戦してみてください。

3問目以降は時間切れになってしまったようですね。
前にやったスライドも確認しながらやってみてください。
2/15までに再提出をお願いします！

後半も楽しみながらやっていきましょう！🎉

[再提出後]
keisukeさん
再提出ありがとうございました！
テストはすべてパスしていますね！
問4、問5の説明も完璧で、素晴らしいです！

変数名の名付けを含めてコードスタイルも非常に良いですが、1点のみご参考までに。
JavaScriptのインデントはスペース2個分とすることが通例です。
（これはVSCodeの設定で、デフォルト値を変更することが可能です。）

この調子で今後も楽しんでいきましょう！


// *** saki iwase ***

assessment-2 お疲れさまでした！

テストは全問パスしています！
おめでとうございます！
素晴らしいです！

問4、問5の説明も理解されていることがうかがわれます。

すべて正解ですが、以下参考にしてください。

・1問目の文字列連結は、是非テンプレートリテラルも使用してみてください。
・2問目、3問目のオブジェクトや配列を格納する変数名は、キャメルケースでお願いします。
・2問目にkeyのデータ型がstringであることを確認されていますが、これは必要でしょうか？
 （keyのデータ型は何だったでしょう？）
 ・VSCodeのインデントはスペース2個分の慣習となっています。
  （これはVSCodeの設定で変更することが可能です。）
 
 今後もこの調子で楽しんでいきましょう！🎉
 
 
 // *** ryosuke mochiki ***
 
assessment-2 お疲れさまでした！

テストは全問パスしています！
おめでとうございます！
素晴らしいです！

テストはパスしていますが、以下の点にご注意いただきたいです。
・'use strict' がありません。
    基礎コースでは説明しませんが大切なものですので、調べてみることをお勧めします。
・変数名、仮引数名がキャメルケースになっていないところがあります。
・2問目、3問目のループの変数がletで宣言されています。
    再代入の必要がない場合はconstでの宣言をお勧めします。
・1問目のfor文でname変数の宣言がありません。
   今回たまたま動作しているのは、windowオブジェクトのnameに値を代入しているからです。
   この関数を動かした後で、コンソールで window.name リターン として確認してみてください。   
   （VSCodeでname変数に波線が引かれ、カーソルを乗せると「非推奨です」と表示されますよね？
   非推奨との表示はされますが、for ofループのカッコ内でname変数をconstで宣言していれば、
   そのスコープのname変数を参照することになりますので、問題なく使用することができます。）

windowオブジェクト
https://developer.mozilla.org/ja/docs/Web/API/Window

window.name
https://developer.mozilla.org/ja/docs/Web/API/Window/name

問4は動作の説明ができています。
問5は問題に「複数のネストされたブロック内で同じ変数名 i を使用している」とわざわざ書かれています。
それを踏まえた形でなぜこのような動作になるのかを説明いただきたかったです。
 
 上記を踏まえて、2/15までに再提出をお願いします！
 
 後半も楽しみながらやっていきましょう！🎉

// *** 再提出 ***
DJさんコメントありがとうございます。
たまたまテストはパスしてただけでした。。。

・'use strict' がありません。
　gitへのコピペをミスしてました。が今後コード書くときなども気をつけます。
　use strictが大事な理由は厳格モードへ適用することで、より安全に簡単にコードを構築できるようになっていると理解しました。

・変数名、仮引数名がキャメルケースになっていないところがあります。
　修正しました。
・2問目、3問目のループの変数がletで宣言されています。
　こちらも修正しました。

・1問目のfor文でname変数の宣言がありません。
　ありがとうございます。たまたま動いていたこと認識しました。
　コード修正後、console.log(i),console.log(name)で表示させてみました。
　iは宣言も何もしてないので変数として定義されていないとエラーが出ましたが、
　nameは文字列で定義されていて空白で表示されてました。

問5は問題に「複数のネストされたブロック内で同じ変数名 i を使用している」と書かれています。
それを踏まえた形でなぜこのような動作になるのかを説明いただきたかったです。
　提出フォームに記載し提出しました。

ryosukeさん
再提出ありがとうございました！
Gistへの再コメントは指示されておりませんので、こちらで失礼します。

テストはすべてパスしていますね！
問5の説明も完璧で、素晴らしいです！

2問目のresultobjがまだキャメルケースではないような？
ここら辺は慣れですので、今後ご注意ください。

変数名の名付けを含めてコードスタイルも非常に良いですが、1点のみご参考までに。
JavaScriptのインデントはスペース2個分とすることが通例です。
（これはVSCodeの設定で、デフォルト値を変更することが可能です。）

細かくてすみません。
「インストラクターとしてのコメント」をしていますが、ぶっちゃけ言うと
実務でのコーディングはチームの方針にもよりますし、どうでも良いところに
気を使うよりも、バグのないコードに心がける方が重要だと感じていたりもします。

いつも質問くださって助かっています。
たぶん、他の方達もryosukeさんの質問で理解を深めている方がいらっしゃると思います。

この調子で今後も楽しんでいきましょう！












